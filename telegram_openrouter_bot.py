import os
import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from telegram.constants import ParseMode

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
import ai_processing
import news_scraper

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–ª—é—á–∏ API ---
# –í–ê–ñ–ù–û: –ü—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (Render –∏ —Ç.–¥.)
# —ç—Ç–∏ –∫–ª—é—á–∏ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∞ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–æ–¥–µ.
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7563880680:AAFpM3h7QXmOVtKdWv5aGYDj-J_C61JXp9o")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY", "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")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è Telegram. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN.")
if not OPENROUTER_API_KEY:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á –¥–ª—è OpenRouter. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENROUTER_API_KEY.")


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é."""
    start_message = """
üëã **–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π.**

–Ø –º–æ–≥—É –≤–∑—è—Ç—å —Å—Ç–∞—Ç—å—é —Å —Å–∞–π—Ç–∞ –Ω–∞ —Ö–∞–∫–∞—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ–µ –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –∞ –∑–∞—Ç–µ–º —Å–¥–µ–ª–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ä–∞–π—Ç.

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`/news [URL —Å—Ç–∞—Ç—å–∏]`

**–ü—Ä–∏–º–µ—Ä:**
`/news https://www.khakaschiry.ru/news/detail.php?ID=14222`
    """
    await update.message.reply_text(start_message, parse_mode=ParseMode.MARKDOWN)


async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /news, –≤—ã–ø–æ–ª–Ω—è—è –≤–µ—Å—å –ø–∞–π–ø–ª–∞–π–Ω."""
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if not context.args:
        await context.bot.send_message(chat_id=chat_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ URL —Å—Ç–∞—Ç—å–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. \n–ü—Ä–∏–º–µ—Ä: `/news https://...`")
        return

    url = context.args[0]
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /news —Å URL: {url}")

    await context.bot.send_message(chat_id=chat_id, text="‚úÖ –ü—Ä–∏–Ω—è—Ç–æ! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ç—å–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")

    # –®–∞–≥ 1: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try:
        scraped_data = await news_scraper.scrape_article(url)
        if not scraped_data:
            await context.bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {e}")
        await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    await context.bot.send_message(chat_id=chat_id, text="üì∞ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–∞. –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–≤–æ–¥...")

    # –®–∞–≥ 2: –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    try:
        translated_text = await ai_processing.translate_text(scraped_data["body"])
        if "–û—à–∏–±–∫–∞ API" in translated_text:
             await context.bot.send_message(chat_id=chat_id, text=f"‚ùå {translated_text}")
             return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        return

    await context.bot.send_message(chat_id=chat_id, text="üîÑ –ü–µ—Ä–µ–≤–æ–¥ –≥–æ—Ç–æ–≤. –ù–∞—á–∏–Ω–∞—é —Ä–µ—Ä–∞–π—Ç–∏–Ω–≥...")

    # –®–∞–≥ 3: –†–µ—Ä–∞–π—Ç–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
    try:
        rewritten_text = await ai_processing.rewrite_text(translated_text)
        if "–û—à–∏–±–∫–∞ API" in rewritten_text:
             await context.bot.send_message(chat_id=chat_id, text=f"‚ùå {rewritten_text}")
             return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ —Ä–µ—Ä–∞–π—Ç–∏–Ω–≥–∞: {e}")
        await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ—Ä–∞–π—Ç–∏–Ω–≥–µ: {e}")
        return

    # –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    final_caption = f"**{scraped_data['title']}**\n\n{rewritten_text}"

    try:
        if scraped_data.get("image_url"):
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=scraped_data["image_url"],
                caption=final_caption,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=final_caption,
                parse_mode=ParseMode.MARKDOWN
            )
        logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        await context.bot.send_message(chat_id=chat_id, text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    # asyncio.run(application.bot.delete_webhook(drop_pending_updates=True))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("news", news_command))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /news.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()